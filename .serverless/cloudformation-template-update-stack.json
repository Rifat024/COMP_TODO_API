{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AddTodoCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/comp-todo-api-test-addTodoCollection"
      }
    },
    "DeleteTodoCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/comp-todo-api-test-deleteTodoCollection"
      }
    },
    "UpdateTodoCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/comp-todo-api-test-updateTodoCollection"
      }
    },
    "GetAllTodoCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/comp-todo-api-test-getAllTodoCollection"
      }
    },
    "GetTodoCollectionByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/comp-todo-api-test-getTodoCollectionById"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "comp-todo-api",
                  "test",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/comp-todo-api-test*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/comp-todo-api-test*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "mobiletargeting:*",
                    "sms-voice:*",
                    "sns:*",
                    "s3:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/DBT_TODO_INFO_2"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/DBT_TODO_INFO_2/index/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "comp-todo-api",
              "test",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AddTodoCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/comp-todo-api/test/1669132658542-2022-11-22T15:57:38.542Z/comp-todo-api.zip"
        },
        "Handler": "src/todo/addTodo.addTodo",
        "Runtime": "nodejs14.x",
        "FunctionName": "comp-todo-api-test-addTodoCollection",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "deletion_policy": "Delete",
            "DOMAIN_NAME": "api.smsj.link",
            "DOMAIN_NAME_PATH": "apivisualizer",
            "LOG_LEVEL": "debug",
            "ENVIRONMENT": "test",
            "ACCOUNT_ID": "767908273889",
            "COG_SCOPE_API_USR1": "devJOTP_RS/devJOTP_SCOPE",
            "COG_SCOPE_API_USR2": "SmsResrceSrvr/SmsResrceSrvr.CRUD",
            "AWS_SECRET_KEY_ID": "AKIA3FSXGL3QQFYWH762",
            "AWS_SECRET_KEY_VAL": "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",
            "pool_id": "us-east-1_sm85HPUaF",
            "DBT_TODO_INFO": "DBT_TODO_INFO_2"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddTodoCollectionLogGroup"
      ]
    },
    "DeleteTodoCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/comp-todo-api/test/1669132658542-2022-11-22T15:57:38.542Z/comp-todo-api.zip"
        },
        "Handler": "src/todo/deleteTodo.deleteById",
        "Runtime": "nodejs14.x",
        "FunctionName": "comp-todo-api-test-deleteTodoCollection",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "deletion_policy": "Delete",
            "DOMAIN_NAME": "api.smsj.link",
            "DOMAIN_NAME_PATH": "apivisualizer",
            "LOG_LEVEL": "debug",
            "ENVIRONMENT": "test",
            "ACCOUNT_ID": "767908273889",
            "COG_SCOPE_API_USR1": "devJOTP_RS/devJOTP_SCOPE",
            "COG_SCOPE_API_USR2": "SmsResrceSrvr/SmsResrceSrvr.CRUD",
            "AWS_SECRET_KEY_ID": "AKIA3FSXGL3QQFYWH762",
            "AWS_SECRET_KEY_VAL": "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",
            "pool_id": "us-east-1_sm85HPUaF",
            "DBT_TODO_INFO": "DBT_TODO_INFO_2"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteTodoCollectionLogGroup"
      ]
    },
    "UpdateTodoCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/comp-todo-api/test/1669132658542-2022-11-22T15:57:38.542Z/comp-todo-api.zip"
        },
        "Handler": "src/todo/updateTodo.updateById",
        "Runtime": "nodejs14.x",
        "FunctionName": "comp-todo-api-test-updateTodoCollection",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "deletion_policy": "Delete",
            "DOMAIN_NAME": "api.smsj.link",
            "DOMAIN_NAME_PATH": "apivisualizer",
            "LOG_LEVEL": "debug",
            "ENVIRONMENT": "test",
            "ACCOUNT_ID": "767908273889",
            "COG_SCOPE_API_USR1": "devJOTP_RS/devJOTP_SCOPE",
            "COG_SCOPE_API_USR2": "SmsResrceSrvr/SmsResrceSrvr.CRUD",
            "AWS_SECRET_KEY_ID": "AKIA3FSXGL3QQFYWH762",
            "AWS_SECRET_KEY_VAL": "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",
            "pool_id": "us-east-1_sm85HPUaF",
            "DBT_TODO_INFO": "DBT_TODO_INFO_2"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTodoCollectionLogGroup"
      ]
    },
    "GetAllTodoCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/comp-todo-api/test/1669132658542-2022-11-22T15:57:38.542Z/comp-todo-api.zip"
        },
        "Handler": "src/todo/getTodo.getAll",
        "Runtime": "nodejs14.x",
        "FunctionName": "comp-todo-api-test-getAllTodoCollection",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "deletion_policy": "Delete",
            "DOMAIN_NAME": "api.smsj.link",
            "DOMAIN_NAME_PATH": "apivisualizer",
            "LOG_LEVEL": "debug",
            "ENVIRONMENT": "test",
            "ACCOUNT_ID": "767908273889",
            "COG_SCOPE_API_USR1": "devJOTP_RS/devJOTP_SCOPE",
            "COG_SCOPE_API_USR2": "SmsResrceSrvr/SmsResrceSrvr.CRUD",
            "AWS_SECRET_KEY_ID": "AKIA3FSXGL3QQFYWH762",
            "AWS_SECRET_KEY_VAL": "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",
            "pool_id": "us-east-1_sm85HPUaF",
            "DBT_TODO_INFO": "DBT_TODO_INFO_2"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllTodoCollectionLogGroup"
      ]
    },
    "GetTodoCollectionByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/comp-todo-api/test/1669132658542-2022-11-22T15:57:38.542Z/comp-todo-api.zip"
        },
        "Handler": "src/todo/getTodo.getById",
        "Runtime": "nodejs14.x",
        "FunctionName": "comp-todo-api-test-getTodoCollectionById",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "deletion_policy": "Delete",
            "DOMAIN_NAME": "api.smsj.link",
            "DOMAIN_NAME_PATH": "apivisualizer",
            "LOG_LEVEL": "debug",
            "ENVIRONMENT": "test",
            "ACCOUNT_ID": "767908273889",
            "COG_SCOPE_API_USR1": "devJOTP_RS/devJOTP_SCOPE",
            "COG_SCOPE_API_USR2": "SmsResrceSrvr/SmsResrceSrvr.CRUD",
            "AWS_SECRET_KEY_ID": "AKIA3FSXGL3QQFYWH762",
            "AWS_SECRET_KEY_VAL": "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",
            "pool_id": "us-east-1_sm85HPUaF",
            "DBT_TODO_INFO": "DBT_TODO_INFO_2"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTodoCollectionByIdLogGroup"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "test-comp-todo-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceTodoDashcollection": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "todo-collection",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTodoDashcollectionIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTodoDashcollection"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodoDashcollectionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollection"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodoDashcollectionIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,DELETE'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollectionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodoDashcollectionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollection"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddTodoCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddTodoCollectionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodoDashcollectionIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollectionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteTodoCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteTodoCollectionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodoDashcollectionIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollectionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateTodoCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateTodoCollectionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodoDashcollectionGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollection"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllTodoCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllTodoCollectionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTodoDashcollectionIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodoDashcollectionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTodoCollectionByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTodoCollectionByIdLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1669132657237": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "test"
      },
      "DependsOn": [
        "ApiGatewayMethodTodoDashcollectionOptions",
        "ApiGatewayMethodTodoDashcollectionIdVarOptions",
        "ApiGatewayMethodTodoDashcollectionPost",
        "ApiGatewayMethodTodoDashcollectionIdVarDelete",
        "ApiGatewayMethodTodoDashcollectionIdVarPut",
        "ApiGatewayMethodTodoDashcollectionGet",
        "ApiGatewayMethodTodoDashcollectionIdVarGet"
      ]
    },
    "AddTodoCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddTodoCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteTodoCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTodoCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateTodoCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTodoCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllTodoCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllTodoCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTodoCollectionByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTodoCollectionByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "todoInfo": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "todoId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "title",
            "AttributeType": "S"
          },
          {
            "AttributeName": "creationDate",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "todoId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "creationDate",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "DBT_TODO_INFO_2",
        "LocalSecondaryIndexes": [
          {
            "IndexName": "LSI_title",
            "KeySchema": [
              {
                "AttributeName": "todoId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "title",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-comp-todo-api-test-ServerlessDeploymentBucketName"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/test"
          ]
        ]
      },
      "Export": {
        "Name": "sls-comp-todo-api-test-ServiceEndpoint"
      }
    }
  }
}